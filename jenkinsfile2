pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                echo "Cloning repository..."
                checkout scm
            }
        }

        stage('Build') {
            steps {
                echo "Setting up build environment..."
                sh 'python3 --version'
                sh 'mkdir -p build'
                sh 'echo "print(\\"Hello from Build Stage\\")" > build/app.py'
            }
        }

        stage('Test') {
            steps {
                echo "Running unit tests..."
                sh 'pip3 install pytest --quiet'
                sh '''
                echo "def test_add():\\n    assert 2 + 3 == 5" > test_app.py
                '''
                sh 'python3 -m pytest --maxfail=1 --disable-warnings -q'
            }
        }



        stage('Package') {
            steps {
                echo "Packaging application..."
                sh 'tar -czf myapp.tar.gz build/'
            }
            post {
                success {
                    archiveArtifacts artifacts: 'myapp.tar.gz', fingerprint: true
                }
            }
        }

        stage('Prepare Dockerfile') {
            steps {
                sh '''
        cat > Dockerfile <<EOF
        FROM python:3.10-slim
        WORKDIR /app
        COPY build/app.py .
        CMD ["python3", "app.py"]
        EOF
                '''
            }
        }



        stage('Docker Build & Run') {
            steps {
                echo "Step 1: Building Docker image..."
                sh 'docker build -t myapp:latest .'

                echo "Step 2: Listing Docker images..."
                sh 'docker images | grep myapp'

                echo "Step 3: Running container..."
                sh 'docker run -d --name myapp_container myapp:latest'

                echo "Step 4: Checking running containers..."
                sh 'docker ps | grep myapp'

                echo "Step 5: Cleaning up container..."
                sh 'docker stop myapp_container || true'
                sh 'docker rm myapp_container || true'
            }
        }

        stage('Deploy') {
            steps {
                echo "Deploying to Development..."
                sh 'echo "Deploying myapp.tar.gz to Dev environment"'
            }
        }
    }

    post {
        success {
            echo "Practice pipeline finished successfully!"
        }
        failure {
            echo "Something went wrong during pipeline execution."
        }
    }
}
